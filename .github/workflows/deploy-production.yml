name: 🧠 Deploy to Production (Custom Domain)

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        default: 'DEPLOY'
  push:
    branches:
      - production

permissions:
  contents: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AMPLIFY_PROD_APP_ID: ${{ secrets.AMPLIFY_PROD_APP_ID }}
  AMPLIFY_PROD_BRANCH: ${{ secrets.AMPLIFY_PROD_BRANCH }}

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate deployment confirmation
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "DEPLOY" ]; then
            echo "❌ Deployment cancelled. Please type 'DEPLOY' to confirm."
            exit 1
          fi
          echo "✅ Production deployment confirmed!"

      - name: Checkout production branch
        uses: actions/checkout@v4
        with:
          ref: production
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Display deployment info
        run: |
          echo "🧠 DEPLOYING PSYCHOLOGY WEBSITE TO PRODUCTION"
          echo "============================================="
          echo "Source Branch: production"
          echo "Target: Production Environment (Custom Domain)"
          echo "Latest Commit: $(git log -1 --oneline)"
          echo "Commit Hash: $(git rev-parse HEAD)"
          echo "Files to deploy:"
          ls -la

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq zip

      - name: Create deployment package
        run: |
          echo "📦 Creating production deployment package..."
          
          # Create clean deployment package
          zip -r psychology-production.zip . \
            -x ".git/*" \
            -x ".github/*" \
            -x "*.log" \
            -x "backups/*" \
            -x "temp/*" \
            -x "logs/*"
          
          echo "📊 Package size: $(du -h psychology-production.zip)"
          echo "📋 Package contents:"
          unzip -l psychology-production.zip | head -10

      - name: Deploy to Amplify Production
        run: |
          echo "🧠 Starting Amplify production deployment..."
          
          # Create deployment
          echo "Creating Amplify production deployment..."
          DEPLOY_RESPONSE=$(aws amplify create-deployment \
            --app-id "${AMPLIFY_PROD_APP_ID}" \
            --branch-name "${AMPLIFY_PROD_BRANCH}" \
            --output json)
          
          echo "Deploy response: $DEPLOY_RESPONSE"
          
          # Extract job ID and upload URL
          JOB_ID=$(echo "$DEPLOY_RESPONSE" | jq -r '.jobId')
          UPLOAD_URL=$(echo "$DEPLOY_RESPONSE" | jq -r '.zipUploadUrl')
          
          echo "Job ID: $JOB_ID"
          echo "Upload URL: $UPLOAD_URL"
          
          # Validate response
          if [ "$JOB_ID" = "null" ] || [ "$UPLOAD_URL" = "null" ] || [ -z "$JOB_ID" ] || [ -z "$UPLOAD_URL" ]; then
            echo "❌ Failed to get deployment details"
            echo "Response: $DEPLOY_RESPONSE"
            exit 1
          fi
          
          # Upload files
          echo "📤 Uploading files to Amplify..."
          curl -X PUT -T psychology-production.zip -H "Content-Type: application/zip" "$UPLOAD_URL"
          
          if [ $? -eq 0 ]; then
            echo "✅ Upload successful"
          else
            echo "❌ Upload failed"
            exit 1
          fi
          
          # Start deployment
          echo "🚀 Starting production deployment..."
          aws amplify start-deployment \
            --app-id "${AMPLIFY_PROD_APP_ID}" \
            --branch-name "${AMPLIFY_PROD_BRANCH}" \
            --job-id "$JOB_ID"
          
          echo "✅ Production deployment initiated successfully!"

      - name: Update main branch with production content
        run: |
          echo "🔄 Updating main branch with production content..."
          
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Checkout main branch
          git checkout main
          
          # Merge production into main
          git merge production --no-ff -m "feat: sync main with production for deployment - $(date)"
          
          # Push to main
          git push origin main
          
          echo "✅ Main branch updated with production content"

      - name: Production Deployment Summary
        run: |
          echo "## 🧠 Psychology Website - Production Deployment Complete!" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Successfully deployed to production" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** $GITHUB_ACTOR" >> $GITHUB_STEP_SUMMARY
          echo "**Source:** production branch" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** Production environment (Custom Domain)" >> $GITHUB_STEP_SUMMARY
          echo "**Latest commit:** $(git log -1 --oneline)" >> $GITHUB_STEP_SUMMARY
          echo "**Commit hash:** $(git rev-parse HEAD)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧠 Psychology Website Features:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Professional psychology consultation services" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Mental health awareness and support content" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Secure contact forms and consultation booking" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Mobile-responsive design for all devices" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SEO optimized for psychology and mental health services" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Professional presentation and trust-building elements" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Production URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- **Custom Domain:** [Your custom domain URL]" >> $GITHUB_STEP_SUMMARY
          echo "- **Amplify URL:** [Your Amplify production URL]" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify production site is live on custom domain" >> $GITHUB_STEP_SUMMARY
          echo "2. Test all functionality and forms" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor site performance and user experience" >> $GITHUB_STEP_SUMMARY
          echo "4. Update DNS settings if needed for custom domain" >> $GITHUB_STEP_SUMMARY
